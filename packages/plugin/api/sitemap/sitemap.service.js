"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SitemapService = void 0;
const core_1 = require("@cmmv/core");
const repository_1 = require("@cmmv/repository");
const medias_service_1 = require("../medias/medias.service");
let SitemapService = class SitemapService {
    mediasService;
    constructor(mediasService) {
        this.mediasService = mediasService;
    }
    async generateSitemapIndex() {
        const apiUrl = core_1.Config.get("blog.url", process.env.API_URL);
        let sitemapIndex = [`<?xml version="1.0" encoding="UTF-8"?>`];
        sitemapIndex.push(`<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`);
        const PostsEntity = repository_1.Repository.getEntity("PostsEntity");
        const CategoriesEntity = repository_1.Repository.getEntity("CategoriesEntity");
        const TagsEntity = repository_1.Repository.getEntity("TagsEntity");
        const post = await repository_1.Repository.findAll(PostsEntity, {
            type: "post",
            status: "published",
            sortBy: "publishedAt",
            sort: "desc",
            limit: 1
        }, [], {
            select: ["publishedAt"]
        });
        const page = await repository_1.Repository.findAll(PostsEntity, {
            type: "page",
            status: "published",
            sortBy: "publishedAt",
            sort: "desc",
            limit: 1
        }, [], {
            select: ["publishedAt"]
        });
        const category = await repository_1.Repository.findAll(CategoriesEntity, {
            sortBy: "updatedAt",
            sort: "desc",
            limit: 1
        }, [], {
            select: ["updatedAt"]
        });
        const tag = await repository_1.Repository.findAll(TagsEntity, {
            sortBy: "updatedAt",
            sort: "desc",
            limit: 1
        }, [], {
            select: ["updatedAt"]
        });
        if (post) {
            sitemapIndex.push(`\t<sitemap>`, `\t\t<loc>${apiUrl}/post-sitemap.xml</loc>`, `\t\t<lastmod>${post.data[0].publishedAt.toISOString()}</lastmod>`, `\t</sitemap>`);
        }
        if (page) {
            sitemapIndex.push(`\t<sitemap>`, `\t\t<loc>${apiUrl}/page-sitemap.xml</loc>`, `\t\t<lastmod>${page.data[0].publishedAt.toISOString()}</lastmod>`, `\t</sitemap>`);
        }
        if (category) {
            sitemapIndex.push(`\t<sitemap>`, `\t\t<loc>${apiUrl}/category-sitemap.xml</loc>`, `\t\t<lastmod>${category.data[0].updatedAt.toISOString()}</lastmod>`, `\t</sitemap>`);
        }
        if (tag) {
            sitemapIndex.push(`\t<sitemap>`, `\t\t<loc>${apiUrl}/tag-sitemap.xml</loc>`, `\t\t<lastmod>${tag.data[0].updatedAt.toISOString()}</lastmod>`, `\t</sitemap>`);
        }
        sitemapIndex.push(`</sitemapindex>`);
        sitemapIndex.push(`<!-- XML Sitemap generated by CMMV - cmmv.io -->`);
        return sitemapIndex.join("\n");
    }
    async getPostSitemap(type = "post") {
        const apiUrl = core_1.Config.get("blog.url", process.env.API_URL);
        let sitemapIndex = [`<?xml version="1.0" encoding="UTF-8"?>`];
        sitemapIndex.push(`<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd http://www.google.com/schemas/sitemap-image/1.1 http://www.google.com/schemas/sitemap-image/1.1/sitemap-image.xsd" xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`);
        const PostsEntity = repository_1.Repository.getEntity("PostsEntity");
        const posts = await repository_1.Repository.findAll(PostsEntity, {
            type: type,
            status: "published",
            sortBy: "publishedAt",
            sort: "desc",
            limit: 100000
        }, [], {
            select: ["publishedAt", "slug", "featureImage", "featureImageAlt", "featureImageCaption"]
        });
        if (type === "page")
            sitemapIndex.push(`<url>`, `<loc>${apiUrl}/</loc>`, `</url>`);
        if (posts) {
            for (const post of posts.data) {
                const featureImage = await this.mediasService.getImageUrl(post.featureImage, "webp", 1200, post.featureImageAlt, post.featureImageCaption);
                sitemapIndex.push(`\t<url>`, `\t\t<loc>${apiUrl}/post/${post.slug}</loc>`, `\t\t<lastmod>${post.publishedAt.toISOString()}</lastmod>`, `\t\t<image:image>`, `\t\t\t<image:loc>${featureImage}</image:loc>`, `\t\t</image:image>`, `\t</url>`);
            }
        }
        sitemapIndex.push(`</urlset>`);
        sitemapIndex.push(`<!-- XML Sitemap generated by CMMV - cmmv.io -->`);
        return sitemapIndex.join("\n");
    }
    async getCategorySitemap() {
        const apiUrl = core_1.Config.get("blog.url", process.env.API_URL);
        let sitemapIndex = [`<?xml version="1.0" encoding="UTF-8"?>`];
        sitemapIndex.push(`<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd http://www.google.com/schemas/sitemap-image/1.1 http://www.google.com/schemas/sitemap-image/1.1/sitemap-image.xsd" xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`);
        const CategoriesEntity = repository_1.Repository.getEntity("CategoriesEntity");
        const categories = await repository_1.Repository.findAll(CategoriesEntity, {
            sortBy: "updatedAt",
            sort: "desc",
            limit: 100000
        });
        if (categories) {
            for (const category of categories.data) {
                sitemapIndex.push(`<url>`, `<loc>${apiUrl}/category/${category.slug}</loc>`, `<lastmod>${category.updatedAt.toISOString()}</lastmod>`, `</url>`);
            }
        }
        sitemapIndex.push(`</urlset>`);
        sitemapIndex.push(`<!-- XML Sitemap generated by CMMV - cmmv.io -->`);
        return sitemapIndex.join("\n");
    }
    async getTagsSitemap() {
        const apiUrl = core_1.Config.get("blog.url", process.env.API_URL);
        let sitemapIndex = [`<?xml version="1.0" encoding="UTF-8"?>`];
        sitemapIndex.push(`<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd http://www.google.com/schemas/sitemap-image/1.1 http://www.google.com/schemas/sitemap-image/1.1/sitemap-image.xsd" xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`);
        const TagsEntity = repository_1.Repository.getEntity("TagsEntity");
        const tags = await repository_1.Repository.findAll(TagsEntity, {
            sortBy: "updatedAt",
            sort: "desc",
            limit: 100000
        }, [], {
            select: ["updatedAt", "slug"]
        });
        if (tags) {
            for (const tag of tags.data) {
                sitemapIndex.push(`<url>`, `<loc>${apiUrl}/tag/${tag.slug}</loc>`, `<lastmod>${tag.updatedAt.toISOString()}</lastmod>`, `</url>`);
            }
        }
        sitemapIndex.push(`</urlset>`);
        sitemapIndex.push(`<!-- XML Sitemap generated by CMMV - cmmv.io -->`);
        return sitemapIndex.join("\n");
    }
};
exports.SitemapService = SitemapService;
exports.SitemapService = SitemapService = __decorate([
    (0, core_1.Service)("sitemap"),
    __metadata("design:paramtypes", [medias_service_1.MediasService])
], SitemapService);
//# sourceMappingURL=sitemap.service.js.map