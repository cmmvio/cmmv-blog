import {
    Service, Config
} from "@cmmv/core";

import {
    Repository
} from "@cmmv/repository";

import {
    MediasService
} from "../medias/medias.service";

@Service("sitemap")
export class SitemapService {
    constructor(private readonly mediasService: MediasService) {}

    /**
     * Generate the sitemap index
     * @returns {Promise<string>}
     */
    async generateSitemapIndex() {
        const apiUrl = Config.get<string>("blog.url", process.env.API_URL);
        let sitemapIndex = [`<?xml version="1.0" encoding="UTF-8"?>`];//<?xml-stylesheet type="text/xsl" href="//andreferreira.com.br/main-sitemap.xsl"?>
        sitemapIndex.push(`<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`);

        const PostsEntity = Repository.getEntity("PostsEntity");
        const CategoriesEntity = Repository.getEntity("CategoriesEntity");
        const TagsEntity = Repository.getEntity("TagsEntity");

        const post = await Repository.findAll(PostsEntity, {
            type: "post",
            status: "published",
            sortBy: "publishedAt",
            sort: "desc",
            limit: 1
        }, [], {
            select: ["publishedAt"]
        });

        const page = await Repository.findAll(PostsEntity, {
            type: "page",
            status: "published",
            sortBy: "publishedAt",
            sort: "desc",
            limit: 1
        }, [], {
            select: ["publishedAt"]
        });

        const category = await Repository.findAll(CategoriesEntity, {
            sortBy: "updatedAt",
            sort: "desc",
            limit: 1
        }, [], {
            select: ["updatedAt"]
        });

        const tag = await Repository.findAll(TagsEntity, {
            sortBy: "updatedAt",
            sort: "desc",
            limit: 1
        }, [], {
            select: ["updatedAt"]
        });

        if(post && post.data.length > 0){
            sitemapIndex.push(
                `\t<sitemap>`,
                    `\t\t<loc>${apiUrl}/post-sitemap.xml</loc>`,
                    `\t\t<lastmod>${post.data[0]?.publishedAt.toISOString()}</lastmod>`,
                `\t</sitemap>`
            );
        }

        if(page && page.data.length > 0){
            sitemapIndex.push(
                `\t<sitemap>`,
                    `\t\t<loc>${apiUrl}/page-sitemap.xml</loc>`,
                    `\t\t<lastmod>${page.data[0]?.publishedAt.toISOString()}</lastmod>`,
                `\t</sitemap>`
            );
        }

        if(category && category.data.length > 0){
            sitemapIndex.push(
                `\t<sitemap>`,
                    `\t\t<loc>${apiUrl}/category-sitemap.xml</loc>`,
                    `\t\t<lastmod>${category.data[0].updatedAt.toISOString()}</lastmod>`,
                `\t</sitemap>`
            );
        }

        if(tag){
            sitemapIndex.push(
                `\t<sitemap>`,
                    `\t\t<loc>${apiUrl}/tag-sitemap.xml</loc>`,
                    `\t\t<lastmod>${tag.data[0].updatedAt.toISOString()}</lastmod>`,
                `\t</sitemap>`
            );
        }

        sitemapIndex.push(`</sitemapindex>`);
        sitemapIndex.push(`<!-- XML Sitemap generated by CMMV - cmmv.io -->`);

        return sitemapIndex.join("\n");
    }

    /**
     * Get the post sitemap
     * @returns {Promise<string>}
     */
    async getPostSitemap(type: string = "post"){
        const apiUrl = Config.get<string>("blog.url", process.env.API_URL);
        let sitemapIndex = [`<?xml version="1.0" encoding="UTF-8"?>`];//<?xml-stylesheet type="text/xsl" href="//andreferreira.com.br/main-sitemap.xsl"?>
        sitemapIndex.push(`<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd http://www.google.com/schemas/sitemap-image/1.1 http://www.google.com/schemas/sitemap-image/1.1/sitemap-image.xsd" xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`);

        const PostsEntity = Repository.getEntity("PostsEntity");

        const posts = await Repository.findAll(PostsEntity, {
            type: type,
            status: "published",
            sortBy: "publishedAt",
            sort: "desc",
            limit: 100000
        }, [], {
            select: ["publishedAt", "slug", "featureImage", "featureImageAlt", "featureImageCaption"]
        });

        if(type === "page")
            sitemapIndex.push(`<url>`, `<loc>${apiUrl}/</loc>`, `</url>`);

        if(posts){
            for(const post of posts.data){
                const featureImage = await this.mediasService.getImageUrl(
                    post.featureImage,
                    "webp",
                    1200,
                    post.featureImageAlt,
                    post.featureImageCaption
                );

                sitemapIndex.push(
                    `\t<url>`,
                        `\t\t<loc>${apiUrl}/post/${post.slug}</loc>`,
                        `\t\t<lastmod>${post.publishedAt.toISOString()}</lastmod>`,
                        `\t\t<image:image>`,
                            `\t\t\t<image:loc>${featureImage}</image:loc>`,
                        `\t\t</image:image>`,
                    `\t</url>`
                );
            }
        }

        sitemapIndex.push(`</urlset>`);
        sitemapIndex.push(`<!-- XML Sitemap generated by CMMV - cmmv.io -->`);

        return sitemapIndex.join("\n");
    }

    /**
     * Get the category sitemap
     * @returns {Promise<string>}
     */
    async getCategorySitemap(){
        const apiUrl = Config.get<string>("blog.url", process.env.API_URL);
        let sitemapIndex = [`<?xml version="1.0" encoding="UTF-8"?>`];//<?xml-stylesheet type="text/xsl" href="//andreferreira.com.br/main-sitemap.xsl"?>
        sitemapIndex.push(`<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd http://www.google.com/schemas/sitemap-image/1.1 http://www.google.com/schemas/sitemap-image/1.1/sitemap-image.xsd" xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`);

        const CategoriesEntity = Repository.getEntity("CategoriesEntity");

        const categories = await Repository.findAll(CategoriesEntity, {
            sortBy: "updatedAt",
            sort: "desc",
            limit: 100000
        });

        if(categories){
            for(const category of categories.data){
                sitemapIndex.push(`<url>`,
                    `<loc>${apiUrl}/category/${category.slug}</loc>`,
                    `<lastmod>${category.updatedAt.toISOString()}</lastmod>`,
                `</url>`);
            }
        }

        sitemapIndex.push(`</urlset>`);
        sitemapIndex.push(`<!-- XML Sitemap generated by CMMV - cmmv.io -->`);

        return sitemapIndex.join("\n");
    }

    /**
     * Get the tags sitemap
     * @returns {Promise<string>}
     */
    async getTagsSitemap(){
        const apiUrl = Config.get<string>("blog.url", process.env.API_URL);
        let sitemapIndex = [`<?xml version="1.0" encoding="UTF-8"?>`];//<?xml-stylesheet type="text/xsl" href="//andreferreira.com.br/main-sitemap.xsl"?>
        sitemapIndex.push(`<urlset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1" xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd http://www.google.com/schemas/sitemap-image/1.1 http://www.google.com/schemas/sitemap-image/1.1/sitemap-image.xsd" xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">`);

        const TagsEntity = Repository.getEntity("TagsEntity");

        const tags = await Repository.findAll(TagsEntity, {
            sortBy: "updatedAt",
            sort: "desc",
            limit: 100000
        }, [], {
            select: ["updatedAt", "slug"]
        });

        if(tags){
            for(const tag of tags.data){
                sitemapIndex.push(`<url>`,
                    `<loc>${apiUrl}/tag/${tag.slug}</loc>`,
                    `<lastmod>${tag.updatedAt.toISOString()}</lastmod>`,
                `</url>`);
            }
        }

        sitemapIndex.push(`</urlset>`);
        sitemapIndex.push(`<!-- XML Sitemap generated by CMMV - cmmv.io -->`);

        return sitemapIndex.join("\n");
    }
}
